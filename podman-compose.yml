# Podman Compose for StoxChai Production Environment
version: '3.8'

services:
  # Main StoxChai Application
  stoxchai-app:
    build: .
    container_name: stoxchai-app
    ports:
      - "8501:8501"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - PYTHONPATH=/app
    volumes:
      - ./data:/app/data:Z
      - ./logs:/app/logs:Z
      - ./cache:/app/cache:Z
    networks:
      - stoxchai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stoxchai-postgres
    environment:
      - POSTGRES_DB=stoxchai
      - POSTGRES_USER=stoxchai
      - POSTGRES_PASSWORD=${DB_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z
      - ./deployment/init.sql:/docker-entrypoint-initdb.d/init.sql:Z
    ports:
      - "5432:5432"
    networks:
      - stoxchai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stoxchai"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: stoxchai-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data:Z
    ports:
      - "6379:6379"
    networks:
      - stoxchai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Ollama AI Service
  ollama:
    image: ollama/ollama:latest
    container_name: stoxchai-ollama
    volumes:
      - ollama_data:/root/.ollama:Z
    ports:
      - "11434:11434"
    networks:
      - stoxchai-network
    restart: unless-stopped
    environment:
      - OLLAMA_ORIGINS=*
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy (using non-privileged ports)
  nginx:
    image: nginx:alpine
    container_name: stoxchai-nginx
    ports:
      - "8080:80"  # Changed from 80:80 to 8080:80
      - "8443:443" # Changed from 443:443 to 8443:443
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:Z
      - ./deployment/ssl:/etc/nginx/ssl:Z
    networks:
      - stoxchai-network
    restart: unless-stopped
    depends_on:
      - stoxchai-app

  # # Prometheus Monitoring
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: stoxchai-prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./deployment/prometheus.yml:/etc/prometheus/prometheus.yml:Z
  #     - prometheus_data:/prometheus
  #   networks:
  #     - stoxchai-network
  #   restart: unless-stopped
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--storage.tsdb.retention.time=200h'
  #     - '--web.enable-lifecycle'

  # # Grafana Dashboard
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: stoxchai-grafana
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
  #   volumes:
  #     - grafana_data:/var/lib/grafana:Z
  #     - ./deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards:Z
  #     - ./deployment/grafana/datasources:/etc/grafana/provisioning/datasources:Z
  #   networks:
  #     - stoxchai-network
  #   restart: unless-stopped
  #   depends_on:
  #     - prometheus

volumes:
  postgres_data:
  redis_data:
  ollama_data:
  # prometheus_data:
  # grafana_data:

networks:
  stoxchai-network:
    driver: bridge 